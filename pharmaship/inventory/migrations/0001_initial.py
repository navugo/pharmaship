# Generated by Django 3.0.6 on 2020-05-10 22:15

from django.db import migrations, models
import django.db.models.deletion
import mptt.fields
import pharmaship.inventory.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Allowance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('author', models.CharField(max_length=100)),
                ('signature', models.CharField(max_length=200)),
                ('date', models.DateField()),
                ('version', models.CharField(max_length=20)),
                ('additional', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=False)),
            ],
            options={
                'unique_together': {('name',)},
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('packaging', models.CharField(max_length=100)),
                ('consumable', models.BooleanField(default=False)),
                ('perishable', models.BooleanField(default=False)),
                ('remark', models.CharField(blank=True, max_length=256, null=True)),
                ('picture', models.ImageField(blank=True, null=True, upload_to=pharmaship.inventory.utils.filepath)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='FirstAidKit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('is_rescue_bag', models.BooleanField(default=False)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='inventory.Location')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Molecule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('roa', models.PositiveIntegerField(choices=[(1, 'Oral'), (5, 'Parenteral'), (6, 'Subcutaneous'), (10, 'Topical'), (11, 'Transdermal'), (20, 'Inhalation'), (21, 'Nebulization'), (30, 'Buccal'), (31, 'Sublingual'), (32, 'Mouthwash'), (33, 'Dental'), (40, 'Rectal'), (41, 'Vaginal'), (50, 'Ocular')])),
                ('dosage_form', models.IntegerField(choices=[(1, 'Tablet'), (2, 'Ampoule'), (3, 'Capsule'), (5, 'Lyophilisat oral'), (6, 'Sachet'), (7, 'Suppository'), (8, 'Capsule'), (9, 'Powder'), (10, 'Tube pommade'), (11, 'Tube crème'), (12, 'Gel buccal'), (13, 'Unidose gel'), (40, 'Seringue pré-remplie'), (50, 'Solution pour perfusion'), (51, 'Solution injectable'), (52, 'Solution acqueuse'), (53, 'Solution moussante'), (54, 'Solution alcoolisée'), (55, 'Solution auriculaire'), (56, 'Solution'), (57, 'Solution gingivale'), (90, 'Bouteille'), (91, 'Flacon'), (92, 'Dispositif'), (93, 'Pansement adhésif cutané'), (94, 'Unidose'), (100, 'Collyre unidose'), (101, 'Collyre flacon'), (102, 'Collutoire'), (103, 'Pommade ophtalmique')])),
                ('composition', models.CharField(max_length=100)),
                ('medicine_list', models.PositiveIntegerField(choices=[(0, 'None'), (1, 'List I'), (2, 'List II'), (9, 'Narcotics')])),
                ('remark', models.CharField(blank=True, max_length=256, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='TelemedicalReqQty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('required_quantity', models.IntegerField()),
                ('allowance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.Allowance')),
                ('base', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.Equipment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('comment', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ('name',),
                'unique_together': {('name',)},
            },
        ),
        migrations.CreateModel(
            name='RescueBagReqQty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('required_quantity', models.IntegerField()),
                ('object_id', models.PositiveIntegerField()),
                ('allowance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.Allowance')),
                ('content_type', models.ForeignKey(limit_choices_to=models.Q(('app_label', 'inventory'), ('model__in', ['equipment', 'molecule'])), on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RescueBag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('location', models.ForeignKey(default=0, on_delete=django.db.models.deletion.SET_DEFAULT, to='inventory.Location')),
            ],
        ),
        migrations.CreateModel(
            name='QtyTransaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.PositiveIntegerField(choices=[(1, 'In'), (2, 'Used'), (4, 'Perished'), (8, 'Physical Count'), (9, 'Other'), (10, 'Sent to First Aid Kit')], verbose_name='Type')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('remark', models.TextField(blank=True, null=True)),
                ('value', models.IntegerField(verbose_name='Value')),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='MoleculeReqQty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('required_quantity', models.IntegerField()),
                ('allowance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.Allowance')),
                ('base', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.Molecule')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MoleculeGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('order', models.IntegerField()),
            ],
            options={
                'ordering': ('order', 'name'),
                'unique_together': {('name',)},
            },
        ),
        migrations.AddField(
            model_name='molecule',
            name='allowances',
            field=models.ManyToManyField(through='inventory.MoleculeReqQty', to='inventory.Allowance'),
        ),
        migrations.AddField(
            model_name='molecule',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.MoleculeGroup'),
        ),
        migrations.AddField(
            model_name='molecule',
            name='tag',
            field=models.ManyToManyField(blank=True, to='inventory.Tag'),
        ),
        migrations.CreateModel(
            name='Medicine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('exp_date', models.DateField(blank=True, null=True, verbose_name='Expiration Date')),
                ('used', models.BooleanField(default=False)),
                ('remark', models.CharField(blank=True, max_length=256, null=True, verbose_name='Remark')),
                ('nc_molecule', models.CharField(blank=True, max_length=100, null=True, verbose_name='Non-conform Molecule')),
                ('nc_composition', models.CharField(blank=True, max_length=100, null=True, verbose_name='Non-conform Composition')),
                ('location', models.ForeignKey(default=0, on_delete=django.db.models.deletion.SET_DEFAULT, to='inventory.Location')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medicines', to='inventory.Molecule')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LaboratoryReqQty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('required_quantity', models.IntegerField()),
                ('allowance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.Allowance')),
                ('base', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.Equipment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FirstAidKitReqQty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('required_quantity', models.IntegerField()),
                ('object_id', models.PositiveIntegerField()),
                ('allowance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.Allowance')),
                ('content_type', models.ForeignKey(limit_choices_to=models.Q(models.Q(('app_label', 'inventory'), ('model', 'equipment')), models.Q(('app_label', 'inventory'), ('model', 'molecule')), _connector='OR'), on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FirstAidKitItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('exp_date', models.DateField(blank=True, null=True, verbose_name='Expiration Date')),
                ('used', models.BooleanField(default=False)),
                ('remark', models.CharField(blank=True, max_length=256, null=True, verbose_name='Remark')),
                ('nc', models.CharField(blank=True, max_length=256, null=True, verbose_name='Non conformity')),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(limit_choices_to=models.Q(('app_label', 'inventory'), ('model__in', ['equipment', 'molecule'])), on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('kit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='inventory.FirstAidKit')),
            ],
            options={
                'ordering': ('exp_date',),
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='firstaidkit',
            name='location',
            field=models.ForeignKey(default=0, on_delete=django.db.models.deletion.SET_DEFAULT, to='inventory.Location'),
        ),
        migrations.CreateModel(
            name='EquipmentReqQty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('required_quantity', models.IntegerField()),
                ('allowance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.Allowance')),
                ('base', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.Equipment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EquipmentGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('order', models.IntegerField()),
            ],
            options={
                'ordering': ('order', 'name'),
                'unique_together': {('name',)},
            },
        ),
        migrations.AddField(
            model_name='equipment',
            name='allowances',
            field=models.ManyToManyField(through='inventory.EquipmentReqQty', to='inventory.Allowance'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.EquipmentGroup'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='tag',
            field=models.ManyToManyField(blank=True, to='inventory.Tag'),
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('exp_date', models.DateField(blank=True, null=True, verbose_name='Expiration Date')),
                ('used', models.BooleanField(default=False)),
                ('remark', models.CharField(blank=True, max_length=256, null=True, verbose_name='Remark')),
                ('nc_packaging', models.CharField(blank=True, max_length=100, null=True, verbose_name='Non-conform Packaging')),
                ('location', models.ForeignKey(default=0, on_delete=django.db.models.deletion.SET_DEFAULT, to='inventory.Location')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='articles', to='inventory.Equipment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterUniqueTogether(
            name='molecule',
            unique_together={('name', 'roa', 'dosage_form', 'composition')},
        ),
        migrations.AlterUniqueTogether(
            name='equipment',
            unique_together={('name', 'packaging', 'consumable', 'perishable')},
        ),
    ]
